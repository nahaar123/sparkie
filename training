import cv2
import os
import numpy as np
from PIL import Image

class FaceRecognizer:
    def __init__(self, detector_path="haarcascade_frontalface_default.xml"):
        self.detector = cv2.CascadeClassifier(detector_path)
        self.recognizer = cv2.face.LBPHFaceRecognizer_create()

    def load_images(self, path):
        face_samples = []
        ids = []

        if not os.path.exists(path):
            print(f"Error: Path '{path}' does not exist.")
            return [], []

        for file_name in os.listdir(path):
            try:
                image_path = os.path.join(path, file_name)

                # Skip files that are not images
                if not self.is_image_file(image_path):
                    continue

                pil_image = Image.open(image_path).convert('L')
                image_np = np.array(pil_image, 'uint8')
                label, _ = os.path.splitext(file_name)
                label = int(label.split('.')[1])  # Assuming file_name is in the format "User.1.x"
                faces = self.detector.detectMultiScale(image_np)
                for (x, y, w, h) in faces:
                    face_samples.append(image_np[y:y+h, x:x+w])
                    ids.append(label)
            except (Image.UnidentifiedImageError, cv2.error) as e:
                print(f"Error processing file {image_path}: {e}")
                continue

        return face_samples, ids

    def is_image_file(self, file_path):
        try:
            Image.open(file_path).verify()
            return True
        except Exception as e:
            return False

    def train_and_save_model(self, data_path, model_save_path):
        faces, ids = self.load_images(data_path)

        if faces and ids:
            self.recognizer.train(faces, np.array(ids))
            self.recognizer.save(model_save_path)
            print("Training data saved.")
        else:
            print("No training data found or an error occurred.")

    def test_model(self, model_path, test_data_path, confidence_threshold=70):
        test_faces, test_ids = self.load_images(test_data_path)

        if test_faces and test_ids:
            self.recognizer.read(model_path)
            correct_predictions = 0

            try:
                for i, test_face in enumerate(test_faces):
                    label, confidence = self.recognizer.predict(test_face)
                    print(f"Predicted Label: {label}, True Label: {test_ids[i]}, Confidence: {confidence}")

                    # You can set a threshold for confidence to consider the prediction correct
                    if confidence < confidence_threshold:
                        correct_predictions += 1

                accuracy = (correct_predictions / len(test_faces)) * 100
                print(f"Accuracy: {accuracy:.2f}%")
            except cv2.error as e:
                print(f"OpenCV error during prediction: {e}")
            except Exception as e:
                print(f"Error during prediction: {e}")
        else:
            print("No testing data found or an error occurred.")

if __name__ == "__main__":
    data_path = 'Dataset'  # Replace with your dataset path
    training_model_path = 'Dataset/training.xml'  # Replace with a valid and writable path
    test_data_path = 'TestDataset'  # Replace with your test dataset path

    face_recognizer = FaceRecognizer()

    # Train and save the model
    face_recognizer.train_and_save_model(data_path, training_model_path)

    # Test the model
    face_recognizer.test_model(training_model_path, test_data_path)
 except Exception as e:
            print(f"Error during prediction: {e}")
    else:
        print("No testing data found or an error occurred.")

if __name__ == "__main__":
    data_path = 'Dataset'  # Replace with your dataset path
    training_model_path = 'Dataset/training.xml'  # Replace with where you want to save the trained model
    test_data_path = 'TestDataset'  # Replace with your test dataset path

    # Train and save the model
    train_and_save_model(data_path, training_model_path)

    # Test the model
    test_model(training_model_path, test_data_path)
