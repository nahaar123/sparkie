import cv2
import os
import numpy as np
from PIL import Image

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

def get_images_with_labels(path):
    face_samples = []
    ids = []
    
    if not os.path.exists(path):
        print(f"Error: Path '{path}' does not exist.")
        return [], []

    image_paths = [os.path.join(path, f) for f in os.listdir(path)]
    
    for image_path in image_paths:
        try:
            pil_image = Image.open(image_path).convert('L')
            image_np = np.array(pil_image, 'uint8')
            id = int(os.path.split(image_path)[-1].split(".")[1])
            faces = detector.detectMultiScale(image_np)
            for (x, y, w, h) in faces:
                face_samples.append(image_np[y:y+h, x:x+w])
                ids.append(id)
        except Exception as e:
            print(f"Error processing file {image_path}: {e}")
            continue
    
    return face_samples, ids

def train_and_save_model(data_path, model_save_path):
    faces, ids = get_images_with_labels(data_path)

    if faces and ids:
        recognizer.train(faces, np.array(ids))
        recognizer.save(model_save_path)
        print("Training data saved.")
    else:
        print("No training data found or an error occurred.")

def test_model(model_path, test_data_path):
    test_faces, test_ids = get_images_with_labels(test_data_path)

    if test_faces and test_ids:
        recognizer.read(model_path)
        correct_predictions = 0

        try:
            for i in range(len(test_faces)):
                label, confidence = recognizer.predict(test_faces[i])
                print(f"Predicted Label: {label}, True Label: {test_ids[i]}, Confidence: {confidence}")

                # You can set a threshold for confidence to consider the prediction correct
                if confidence < 70:  # Adjust the threshold as needed
                    correct_predictions += 1

            accuracy = (correct_predictions / len(test_faces)) * 100
            print(f"Accuracy: {accuracy:.2f}%")
        except Exception as e:
            print(f"Error during prediction: {e}")
    else:
        print("No testing data found or an error occurred.")

if __name__ == "__main__":
    data_path = 'Dataset'  # Replace with your dataset path
    training_model_path = 'Dataset/training.xml'  # Replace with where you want to save the trained model
    test_data_path = 'TestDataset'  # Replace with your test dataset path

    # Train and save the model
    train_and_save_model(data_path, training_model_path)

    # Test the model
    test_model(training_model_path, test_data_path)
